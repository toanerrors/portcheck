name: Build and Release

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
      - master

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install ShellCheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck

      - name: Lint shell scripts
        run: |
          shellcheck src/*.sh
          shellcheck *.sh

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: lint
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y lsof dpkg-dev

      - name: Create Man Page
        shell: bash
        run: |
          if [ -f docs/portcheck.1 ]; then
            mkdir -p build
            gzip -c docs/portcheck.1 > build/portcheck.1.gz
          else
            echo "No man page found, creating basic man page..."
            mkdir -p docs
            cat > docs/portcheck.1 << 'MANEOF'
            .TH PORTCHECK 1 "$(date +"%B %Y")" "portcheck $(grep VERSION config/version.conf | cut -d '"' -f 2)" "User Commands"
            .SH NAME
            portcheck \- kiểm tra và quản lý tiến trình đang sử dụng các cổng mạng
            .SH SYNOPSIS
            .B portcheck
            [\fIOPTIONS\fR] \fIPORT1\fR [\fIPORT2 PORT3 ...\fR]
            .SH DESCRIPTION
            Công cụ kiểm tra và quản lý tiến trình đang sử dụng các cổng mạng.
            .SH OPTIONS
            .TP
            .BR \-h ", " \-\-help
            Hiển thị trợ giúp
            .TP
            .BR \-f ", " \-\-force
            Kill các tiến trình mà không hỏi
            .TP
            .BR \-g ", " \-\-graceful
            Thử SIGTERM trước, sau đó SIGKILL
            .TP
            .BR \-l ", " \-\-list
            Chỉ liệt kê tiến trình
            .TP
            .BR \-v ", " \-\-version
            Hiển thị phiên bản và thông tin
            .SH AUTHOR
            $(grep AUTHOR config/version.conf | cut -d '"' -f 2) <$(grep EMAIL config/version.conf | cut -d '"' -f 2)>
            MANEOF
            mkdir -p build
            gzip -c docs/portcheck.1 > build/portcheck.1.gz
          fi

      - name: Build Debian Package
        run: make package-deb

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: portcheck-deb
          path: build/portcheck.deb
          if-no-files-found: error

      - name: Create Tarball
        run: |
          VERSION=$(grep VERSION config/version.conf | cut -d '"' -f 2)
          mkdir -p "portcheck-${VERSION}"
          cp -r src config docs LICENSE README.md CHANGELOG.md Makefile install.sh uninstall.sh "portcheck-${VERSION}/"
          tar -czf "build/portcheck-${VERSION}.tar.gz" "portcheck-${VERSION}"

      - name: Upload Tarball Artifact
        uses: actions/upload-artifact@v4
        with:
          name: portcheck-tarball
          path: build/portcheck-*.tar.gz
          if-no-files-found: error

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Port Checker ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/portcheck-deb/portcheck.deb
            artifacts/portcheck-tarball/portcheck-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}